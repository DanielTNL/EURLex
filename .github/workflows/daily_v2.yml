name: Pipeline v2 (daily)

on:
  schedule:
    - cron: "0 6 * * *" # UTC
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: daily-v2
  cancel-in-progress: false

env:
  TZ: Europe/Amsterdam

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Install dependencies from root + scripts (+ workers if present), fail fast
      - name: Install deps (root + scripts + workers)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip setuptools wheel

          echo "== requirements files present =="
          ls -1 requirements*.txt scripts/*.txt workers/*.txt 2>/dev/null || true

          for f in requirements.txt scripts/requirements.txt workers/requirements.txt; do
            if [ -f "$f" ]; then
              echo ">>> Checking $f for trailing-dot version pins"
              if grep -nE '==[0-9]+\.[0-9]+\.($|[^0-9])' "$f"; then
                echo "Invalid version specifier (trailing dot) in $f"; exit 1;
              fi
              echo ">>> Installing from $f"
              python -m pip install -r "$f"
            fi
          done

          python -m pip check

      # 1) Discover last 24h (capture exit code instead of continue-on-error)
      - name: Daily discover (last 24h)
        id: discover
        run: |
          set +e
          if [ -f sources_v2.yaml ]; then
            python workers/weekly_discover.py --window 1d --sources sources_v2.yaml --config config_v2.yaml
            rc=$?
          else
            python workers/weekly_discover.py --window 1d --config config_v2.yaml
            rc=$?
          fi
          echo "DISCOVER_RC=$rc" >> "$GITHUB_ENV"
          exit 0

      # 1b) Fallback only if discover failed
      - name: "Fallback: write empty discovery"
        if: ${{ env.DISCOVER_RC != '0' }}
        shell: python
        run: |
          import os, json
          from datetime import datetime, timezone
          os.makedirs("state", exist_ok=True)
          payload = {
            "generated_at": datetime.now(timezone.utc).isoformat(),
            "window": "1d",
            "items": [],
            "documents": [],
            "sources": []
          }
          with open("state/latest_discovery.json", "w", encoding="utf-8") as f:
            json.dump(payload, f, ensure_ascii=False)
          print("Wrote state/latest_discovery.json (empty fallback)")

      # 2) Process documents
      - name: Process documents
        run: |
          python workers/process_document.py --from state/latest_discovery.json --config config_v2.yaml --limit 50

      # 3) Build timeline (7d)
      - name: Build timeline (rolling 7d)
        run: |
          python workers/build_timeline.py --window 7d --config config_v2.yaml

      # 4) Daily digest
      - name: Build daily digest
        run: |
          python workers/build_daily_digest.py --hours 24

      # 5) Build site payload
      - name: Build site payload
        run: |
          if [ -f build_site_data.py ]; then
            python build_site_data.py || true
          else
            python workers/build_site_data_v2.py
          fi

      # 6) Publish site bridge (v2 -> legacy)
      - name: Publish site bridge (v2 -> legacy)
        run: |
          python workers/publish_site_bridge.py

      # 6b) Ensure GitHub Pages serves raw files (skip Jekyll)
      - name: Ensure .nojekyll in docs
        run: |
          mkdir -p docs
          touch docs/.nojekyll

      # 7) Show outputs in logs
      - name: Show outputs (ls + head)
        run: |
          echo "== outputs/docs ==" && ls -lah outputs/docs || true
          echo "== outputs/timelines ==" && ls -lah outputs/timelines || true
          echo "== reports/daily ==" && ls -lah reports/daily || true
          echo "== docs/digests ==" && ls -lah docs/digests || true
          echo "== docs/data ==" && ls -lah docs/data || true
          echo "== docs/site ==" && ls -lah docs/site || true
          echo "== docs root json ==" && ls -lah docs/*.json || true
          for f in outputs/docs/*.ndjson; do echo "---- $f"; head -n 2 "$f" || true; done
          for f in outputs/timelines/*.json; do echo "---- $f"; head -n 40 "$f" || true; done

      # 8) Upload artifacts (optional)
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: daily-v2-data
          path: |
            outputs/docs/*.ndjson
            outputs/timelines/*.json
            reports/daily/*.md
            docs/digests/*.json
            docs/data/*.json
            docs/*.json
            docs/site/*.json
          if-no-files-found: warn

      # 9) Commit results
      - name: Commit results back to main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add outputs/docs outputs/timelines reports/daily docs/digests docs/data docs/site docs/*.json docs/.nojekyll || true
          git commit -m "daily pipeline v2 $(date -u +'%F %T') [auto]" || echo "No changes to commit"
          git push || true

      # 10) Warm GitHub Pages (Pages has no /api/revalidate)
      - name: Warm GitHub Pages
        run: |
          ROOT_URL="https://danieltnl.github.io/EURLex/"
          echo "GET $ROOT_URL"
          curl -sS -I "$ROOT_URL" || true
