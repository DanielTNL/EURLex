name: Pipeline v2 (daily)

on:
  schedule:
    - cron: "0 6 * * *" # UTC
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: daily-v2
  cancel-in-progress: false

env:
  TZ: Europe/Amsterdam

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (best-effort)
        run: |
          python -V
          pip install -r requirements.txt || true
          pip install requests python-dateutil beautifulsoup4 lxml pyyaml orjson feedparser html5lib || true

      # 1) Discover last 24h (with tolerant fallback if the primary discover crashes)
      - name: Daily discover (last 24h)
        run: |
          set -e
          ok=0
          if [ -f sources_v2.yaml ]; then
            python workers/weekly_discover.py --window 1d --sources sources_v2.yaml --config config_v2.yaml && ok=1 || ok=0
          else
            python workers/weekly_discover.py --window 1d --config config_v2.yaml && ok=1 || ok=0
          fi

          if [ "$ok" -ne 1 ]; then
            echo "::warning:: Primary discover failed. Writing minimal state/latest_discovery.json so pipeline can continue."
            python - <<'PY'
import os, json
from datetime import datetime, timezone
os.makedirs("state", exist_ok=True)
payload = {
  "generated_at": datetime.now(timezone.utc).isoformat(),
  "window": "1d",
  "items": [],
  "documents": [],
  "sources": []
}
with open("state/latest_discovery.json", "w", encoding="utf-8") as f:
    json.dump(payload, f, ensure_ascii=False)
print("Wrote state/latest_discovery.json (empty fallback)")
PY
          fi

      # 2) Process documents
      - name: Process documents
        run: |
          python workers/process_document.py --from state/latest_discovery.json --config config_v2.yaml --limit 50

      # 3) Build timeline (7d)
      - name: Build timeline (rolling 7d)
        run: |
          python workers/build_timeline.py --window 7d --config config_v2.yaml

      # 4) Daily digest
      - name: Build daily digest
        run: |
          python workers/build_daily_digest.py --hours 24

      # 5) Build site payload
      - name: Build site payload
        run: |
          if [ -f build_site_data.py ]; then
            python build_site_data.py || true
          else
            python workers/build_site_data_v2.py
          fi

      # 6) Publish site bridge (v2 -> legacy)
      - name: Publish site bridge (v2 -> legacy)
        run: |
          python workers/publish_site_bridge.py

      # 7) Show outputs in logs
      - name: Show outputs (ls + head)
        run: |
          echo "== outputs/docs ==" && ls -lah outputs/docs || true
          echo "== outputs/timelines ==" && ls -lah outputs/timelines || true
          echo "== reports/daily ==" && ls -lah reports/daily || true
          echo "== docs/digests ==" && ls -lah docs/digests || true
          echo "== docs/data ==" && ls -lah docs/data || true
          echo "== docs/site ==" && ls -lah docs/site || true
          echo "== docs root json ==" && ls -lah docs/*.json || true
          for f in outputs/docs/*.ndjson; do echo "---- $f"; head -n 2 "$f" || true; done
          for f in outputs/timelines/*.json; do echo "---- $f"; head -n 40 "$f" || true; done

      # 8) Upload artifacts (optional)
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: daily-v2-data
          path: |
            outputs/docs/*.ndjson
            outputs/timelines/*.json
            reports/daily/*.md
            docs/digests/*.json
            docs/data/*.json
            docs/*.json
            docs/site/*.json
          if-no-files-found: warn

      # 9) Commit results
      - name: Commit results back to main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add outputs/docs outputs/timelines reports/daily docs/digests docs/data docs/site docs/*.json || true
          git commit -m "daily pipeline v2 $(date -u +'%F %T') [auto]" || echo "No changes to commit"
          git push || true

      # 10) Revalidate website (simple & safe; no YAML-quote traps)
      - name: Revalidate website
        run: |
          REVALIDATE_URL="https://YOUR_DOMAIN_HERE/api/revalidate?secret=694yI9Tf8as-f4pMkqpPM28FArtIuEzkwmS5GCcVLAg"
          echo '{"paths":["/","/live"]}' > payload.json
          echo "POST $REVALIDATE_URL"
          curl -sS -X POST "$REVALIDATE_URL" \
            -H "Content-Type: application/json" \
            --data-binary @payload.json || true
