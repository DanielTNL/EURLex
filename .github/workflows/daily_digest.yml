name: EUR-Lex Daily Digest

on:
  # 04:00 UTC ≈ 06:00 Amsterdam in summer (CEST), 05:00 in winter (CET)
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  digest:
    runs-on: ubuntu-latest
    concurrency:
      group: eurlex-digest
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt', 'scripts/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      # Install dependencies from root + scripts (+ workers if present), fail fast
      - name: Install dependencies (root + scripts + workers)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip setuptools wheel

          echo "== requirements files present =="
          ls -1 requirements*.txt scripts/*.txt workers/*.txt 2>/dev/null || true

          for f in requirements.txt scripts/requirements.txt workers/requirements.txt; do
            if [ -f "$f" ]; then
              echo ">>> Checking $f for trailing-dot version pins"
              if grep -nE '==[0-9]+\.[0-9]+\.($|[^0-9])' "$f"; then
                echo "Invalid version specifier (trailing dot) in $f"; exit 1;
              fi
              echo ">>> Installing from $f"
              python -m pip install -r "$f"
            fi
          done

          python -m pip check

      # Guard + visibility: ensure a model is set and show which one we'll use
      - name: Assert OpenAI model
        env:
          OPENAI_MODEL: ${{ vars.OPENAI_MODEL || 'gpt-4o-mini' }}
        run: |
          python - <<'PY'
          import os, sys
          m = (os.getenv("OPENAI_MODEL") or "").strip()
          if not m:
              print("ERROR: OPENAI_MODEL is empty. Set repo variable OPENAI_MODEL or rely on fallback.", file=sys.stderr)
              sys.exit(2)
          print("Resolved OPENAI_MODEL:", m)
          PY

      - name: Run digest
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GMAIL_USER:     ${{ secrets.GMAIL_USER }}
          GMAIL_PASS:     ${{ secrets.GMAIL_PASS }}
          # ✅ Always provide a model (repo var fallback → hard default)
          OPENAI_MODEL:   ${{ vars.OPENAI_MODEL || 'gpt-4o-mini' }}

          # Google OAuth (your Gmail)
          GOOGLE_OAUTH_CLIENT_ID:     ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
          GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
          GOOGLE_OAUTH_REFRESH_TOKEN: ${{ secrets.GOOGLE_OAUTH_REFRESH_TOKEN }}

          # Optional routing/sharing
          GOOGLE_DOCS_FOLDER_ID:      ${{ secrets.GOOGLE_DOCS_FOLDER_ID }}
          GOOGLE_DOCS_SHARE_WITH:     ${{ secrets.GOOGLE_DOCS_SHARE_WITH }}
        run: python main.py

      - name: Commit daily report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain reports state)" ]; then
            git add reports state
            git commit -m "Add daily report $(date -u +%F)"
            git push
          else
            echo "No changes in reports/ or state/"
          fi

      - name: Notify on failure
        if: failure()
        env:
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
        run: |
          python - <<'PY'
          import os, smtplib
          from email.mime.text import MIMEText
          u, p = os.environ['GMAIL_USER'], os.environ['GMAIL_PASS']
          msg = MIMEText("EUR-Lex Daily Digest failed. Check Actions logs.")
          msg['Subject'] = "EUR-Lex Digest – FAILED"
          msg['From'] = u
          msg['To'] = u
          with smtplib.SMTP_SSL("smtp.gmail.com", 465) as s:
              s.login(u, p)
              s.sendmail(u, [u], msg.as_string())
          PY
