name: "EUR-Lex â€” Build site data"

on:
  workflow_dispatch: {}          # manual 'Run workflow' button
  schedule:
    - cron: "10 6 * * *"         # daily 06:10 UTC
  push:
    branches: [ main ]
    paths:
      - "reports/**"
      - "scripts/**"
      - "!docs/**"               # don't retrigger on our own data commit

permissions:
  contents: write

concurrency:
  group: build-site-data-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Install from root AND scripts requirements, with guards + debug
      - name: Install deps (root + scripts)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip setuptools wheel

          echo "== requirements files present =="
          ls -1 requirements*.txt scripts/*.txt 2>/dev/null || true

          for f in requirements.txt scripts/requirements.txt; do
            if [ -f "$f" ]; then
              echo ">>> Checking $f for trailing-dot version pins"
              if grep -nE '==[0-9]+\.[0-9]+\.($|[^0-9])' "$f"; then
                echo "Invalid version specifier (trailing dot) in $f"; exit 1;
              fi
              echo ">>> Installing from $f"
              python -m pip install -r "$f"
            fi
          done

          python -m pip check

      - name: Build site data (posts.json + reports.json + audio.json)
        run: python scripts/build_site_data.py

      # Rebase-safe commit using your PAT (so workflow updates are allowed)
      - name: Commit & push data (via PAT)
        env:
          PAT_WORKFLOW: ${{ secrets.PAT_WORKFLOW }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail

          git config user.name  "automation"
          git config user.email "actions@users.noreply.github.com"

          # Stage only the generated artifacts (adjust if your script writes elsewhere)
          git add docs/data/posts.json docs/data/reports.json docs/data/audio.json || true

          # If nothing changed, we're done
          if git diff --cached --quiet; then
            echo "No data changes to commit."
            exit 0
          fi

          # Rebase-safe: put our staged changes on top of latest remote main
          git fetch origin main
          git reset --soft origin/main
          git add docs/data/posts.json docs/data/reports.json docs/data/audio.json

          git commit -m "Build site data $(date -u +%F)"

          # Push using PAT (masked in logs)
          git remote set-url origin https://${PAT_WORKFLOW}@github.com/${REPO}.git
          git push origin HEAD:main
